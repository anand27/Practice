-----------------------------------------------------------------
Reentrant locks vs monitors

- threads do not goto waiting state / return with false if they do not get lock
- threads can wait for a timeout period unlike monitors
- span to more than one methods
- have fairness policy / wait in order in which they arrived for lock
-----------------------------------------------------------------

callable vs runnable

- exception can be thrown in call()
- result can be returned from call()
-----------------------------------------------------------------

semaphore(mutex/binary/counting) vs monitor(synchronized keyword)

- both guard the critical section 
- semaphore signals for threads & monitor releases locks for threads

- semaphore allows n threads to access a shared object
- Semaphore is signaling mechanism (one thread does some work then calls acquire(), other thread calls release() then does some work)
- works on permits
- a bike hire place
- n threads m permits
- fairness of the threads acquiring permits
- using a semaphore you can avoid missed signals.
(if no thread waits and some other thread calls acquire() and goes away, 
then the thread which has come to call release() now, will see a signal to be true and won't wait(),
it will know that someone has modified the signal variable before it)

- monitors allow mutex of shared object
- a mutex is locking mechanism (one thread leaves monitor & notifies other threads that are waiting, other threads wait for the monitor)
- works on locks
- a public toilet
- n threads 1 lock
- no fairness
- a thread can miss a signal / turn 
(if no thread waits and some other thread calls notify() and goes away, 
then the thread which has come to wait() now, HAS actually missed a notify signal) 
-----------------------------------------------------------------

volatile

- threads avoid-waiting for the completion of the critical section
  so that they can read the UPDATED value of resource from memory 
- all threads share the resource(primitive/object)
- concurrenthashmap class (parallel reads while write)
- atomic classes
-----------------------------------------------------------------

Atomic

- for atomic operations 
- read, update, write operations
- implemented with compare and set processor level locks
- atomic reference ? 
-----------------------------------------------------------------

composition vs aggregation
-----------------------------------------------------------------

Thread Synchronizers

- Executors
- Cyclic Barriers
- Count down latches
- Exchangers
- Monitors
- Semaphores
- Reentrant locks

synchronization mechanism

- synchronized keyword

ordering mechanism

- additional constructs / data / objects

monitor concept

- wait() , notify(), notifyAll()
-----------------------------------------------------------------

kill a thread

- intercept a thread
- t.stop() // depricated -> why ? 
- use Future class to get status of thread
-----------------------------------------------------------------

how to identify a deadlock and resolve it 

-----------------------------------------------------------------

Synch block vs synch instance method

- synch method makes performance slow
- synch block makes performance fast as they lock only few lines

- hashtable -> synch methods
- singleton double check locking

- multiple threads cannot act on more than 1 synch method at the same time
- multiple threads cannot act on more than 1 synch block at the same time ?

- synch method by default takes lock on object
- synch block takes lock on anything (can be any object / this / class)

-----------------------------------------------------------------

stack vs heap

local variables / references / declarations are on stack
instance members / references and objects created are on heaps
-----------------------------------------------------------------

local variables of a method are thread safe
final and static variables are thread safe ? 
-----------------------------------------------------------------

sleep() vs wait() vs yield()

- wait asks the monitor of the object to release the lock on the object
- sleep makes the current thread to leave the processor but holds the lock on the object
-----------------------------------------------------------------

classloader in java ? 
static keyword ? 
-----------------------------------------------------------------

Producer consumer implementation ways

- monitors (synchronized, wait, notify)
- semaphores (aquire after insertion in shared list, release before taking from a shared list, n permits for n elements)
- blocking queue
-----------------------------------------------------------------